# The MIT License (MIT)
#
# Copyright (c) 2014 Gustavo Franco
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


[user]
  # Name
  name = Gustavo Franco

  # E-mail
  email = gufranco@users.noreply.github.com

[core]
  # Global ignore
  excludesfile = ~/.gitglobalignore

  # Don't convert line break to CRLF. Keep CR
  autocrlf = input

  # Paginate results
  pager = less -FRSX

  # Remove whitespaces, use CR and indent using spaces
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol

  # Default text editor
  editor = vim -f

  # Uh, well... you know. Windows sucks :(
  longpaths = true

[color]
  ui = auto

[color "status"]
  added = green
  changed = yellow
  untracked = red

[color "branch"]
  current = magenta
  local = yellow
  remote = green

[color "diff"]
  meta = yellow
  frag = magenta
  old = red
  new = green

[branch]
  # Always merge using rebase
  autosetuprebase = always

[rerere]
  # Reuse recorded resolution
  enabled = true

[push]
  # Only push current branch
  default = current

[help]
  # Suggest the correct command
  autocorrect = 1

[alias]
  # Who am I? IT'S A ME, MARIO! :)
  me = config user.name

  # Commit shortcut
  ci = commit

  # Signed commit shortcut
  cis = commit -S

  # Commit shortcut
  co = checkout

  # Less verbose status
  st = status -sb

  # Checkout master
  cm = checkout master

  # Checkout homologation
  ch = checkout homologation

  # Checkout development
  cd = checkout development

  # Push master
  pm = push -u origin master

  # Push homologation
  ph = push -u origin homologation

  # Push development
  pd = push -u origin development

  # Syncronize local branchs with remote
  fe = fetch origin

  # Fork a branch
  fork = checkout -b

  # Pull without rebase
  pmerge = pull --no-rebase

  # Complete pull (with submodules)
  pull-sub = !(git pull && git submodule foreach git pull origin master)

  # Pretty log
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

  # Remote commits ahead of mine
  incoming = !(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' ..@{u})

  # Remote commits ahead of local
  outgoing = !(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' @{u}..)

  # The missing command <3
  unstage = reset HEAD --

  # Undo modifications to a file
  undo = checkout --

  # Last 24 hours commits
  standup = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --since yesterday --author 'Gustavo Franco'

  # Review commits before pushing
  ready = rebase -i @{u}

  # Branchs hier
  hier = log --all --graph --decorate --oneline --simplify-by-decoration

  # Backup isn't enough <3
  backup = !tar -cvzf ../git_backup.tgz *
